unit Aurelius.Sql.Firebird;

{$I Aurelius.inc}

interface

uses
  Aurelius.Sql.AnsiSqlGenerator,
  Aurelius.Sql.BaseTypes,
  Aurelius.Sql.Commands,
  Aurelius.Sql.Interfaces,
  Aurelius.Sql.Register;

type
  TFirebirdSQLGenerator = class(TAnsiSQLGenerator)
  protected
    function GetMaxConstraintNameLength: Integer; override;
    function FieldTypeToSQL(FieldDef: TSQLFieldDefinition): string; override;

    function GetGeneratorName: string; override;
    function GetSqlDialect: string; override;

    function GenerateGetNextSequenceValue(Command: TGetNextSequenceValueCommand): string; override;
    function GenerateCreateSequence(Command: TCreateSequenceCommand): string; override;
    function GenerateDropSequence(Command: TDropSequenceCommand): string; override;
    function GenerateLimitedSelect(SelectSql: TSelectSql; Command: TSelectCommand): string; override;

    function GetSupportedFeatures: TDBFeatures; override;
  end;

implementation

uses
  DB, SysUtils;

{ TFirebirdSQLGenerator }

function TFirebirdSQLGenerator.FieldTypeToSQL(
  FieldDef: TSQLFieldDefinition): string;
begin
  Result := NumericTypeToSQL(FieldDef);
  if Result <> '' then
    Exit;

  case FieldDef.FieldType of
    ftLargeInt:
      Result := 'NUMERIC(18)';

    ftWideString:
      Result := Format('NCHAR VARYING(%d)', [FieldDef.Length]);

    ftCurrency:
      Result := 'NUMERIC(18, 4)';
//    ftFMTBcd:
//      Result := 'NUMERIC(18, 9)';

    ftMemo:
      Result := 'BLOB SUB_TYPE TEXT';
    ftWideMemo:
      Result := 'BLOB SUB_TYPE TEXT';
    ftBlob:
      Result := 'BLOB';
  else
    Result := inherited FieldTypeToSQL(FieldDef);
  end;
end;

function TFirebirdSQLGenerator.GenerateCreateSequence(
  Command: TCreateSequenceCommand): string;
begin
  Result := 'CREATE GENERATOR ' + Command.SequenceName + ';';
end;

function TFirebirdSQLGenerator.GenerateDropSequence(
  Command: TDropSequenceCommand): string;
begin
  Result := 'DROP GENERATOR ' + Command.SequenceName + ';';
end;

function TFirebirdSQLGenerator.GenerateGetNextSequenceValue(
  Command: TGetNextSequenceValueCommand): string;
begin
  Result := 'SELECT GEN_ID(' + Command.SequenceName + ', ' +
    IntToStr(Command.Increment) + ')'#13#10'FROM RDB$DATABASE;';
end;

function TFirebirdSQLGenerator.GenerateLimitedSelect(SelectSql: TSelectSql; Command: TSelectCommand): string;
begin
  Result := GenerateRegularSelect(SelectSql) + #13#10;
  if Command.HasFirstRow then
    Result := Result + Format('ROWS %d To %d', [Command.FirstRow + 1, Command.LastRow + 1])
  else
    Result := Result + Format('ROWS %d', [Command.MaxRows]);
end;

function TFirebirdSQLGenerator.GetSqlDialect: string;
begin
  Result := 'Firebird';
end;

function TFirebirdSQLGenerator.GetGeneratorName: string;
begin
  Result := 'Firebird SQL Generator';
end;

function TFirebirdSQLGenerator.GetMaxConstraintNameLength: Integer;
begin
  Result := 31;
end;

function TFirebirdSQLGenerator.GetSupportedFeatures: TDBFeatures;
begin
  Result := AllDBFeatures - [TDBFeature.AutoGenerated];
end;

initialization
  TSQLGeneratorRegister.GetInstance.RegisterGenerator(TFirebirdSQLGenerator.Create);

end.
