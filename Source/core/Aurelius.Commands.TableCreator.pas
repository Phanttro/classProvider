unit Aurelius.Commands.TableCreator;

{$I Aurelius.inc}

interface

uses
  Generics.Collections,
  Aurelius.Commands.AbstractCommandPerformer,
  Aurelius.Sql.Commands;

type
  TTableCreator = class(TAbstractCommandPerformer)
  public
    procedure CreateTable(ACommands: TList<TDDLCommand>);
    procedure DropTable(ACommands: TList<TDDLCommand>);
  end;

implementation

uses
  Aurelius.Global.Config,
  Aurelius.Mapping.Metadata,
  Aurelius.Sql.BaseTypes,
  Aurelius.Sql.Interfaces;

{ TTableCreator }

procedure TTableCreator.CreateTable(ACommands: TList<TDDLCommand>);

  function IsPKColumn(Col: TColumn): boolean;
  var
    C: TColumn;
  begin
    Result := False;
    for C in FPKColumns do
      if C = Col then
        Exit(True);
  end;

var
  Command: TCreateTableCommand;
  C: TColumn;
  UKs: TObjectList<TUniqueConstraint>;
  UK: TUniqueConstraint;
begin
  Command := TCreateTableCommand.Create;
  ACommands.Add(Command);
  Command.Table := CreateSQLTable;

  for C in FColumns do
  begin
    if C.IsForeign then
      Continue;

    Command.Fields.Add(GetEquivalentDefinition(TSQLFieldDefinition.Create(
      C.Name, TColumnProp.Required in C.Properties, C.FieldType, C.Length, C.Precision,
      C.Scale,
      IsAutoGeneratedColumn(C) and (TDBFeature.AutoGenerated in SQLGenerator.SupportedFeatures)
      )));

    if (TColumnProp.Unique in C.Properties) and not IsPKColumn(C) then
      Command.UniqueConstraints.Add(TCreateUniqueKeyCommand.Create(CreateSQLTable, [C.Name]));
  end;

  // Add primary key
  Command.IdFields.Clear;
  for C in FPKColumns do
    Command.IdFields.Add(C.Name);

  // Add composite unique keys
  UKs := Explorer.GetUniqueConstraints(Self.Clazz);
  try
    for UK in UKs do
      Command.UniqueConstraints.Add(TCreateUniqueKeyCommand.Create(CreateSQLTable, UK.FieldNames));
  finally
    UKs.Free;
  end;
end;

procedure TTableCreator.DropTable(ACommands: TList<TDDLCommand>);
var
  Command: TDropTableCommand;
begin
  Command := TDropTableCommand.Create;
  ACommands.Add(Command);
  Command.Table := CreateSQLTable;
end;

end.
