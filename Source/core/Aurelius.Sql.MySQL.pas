unit Aurelius.Sql.MySQL;

{$I Aurelius.inc}

interface

uses
  DB,
  Aurelius.Sql.AnsiSqlGenerator,
  Aurelius.Sql.BaseTypes,
  Aurelius.Sql.Commands,
  Aurelius.Sql.Interfaces,
  Aurelius.Sql.Register;

type
  TMySQLSQLGenerator = class(TAnsiSQLGenerator)
  protected
    function GetMaxConstraintNameLength: Integer; override;

    function FieldTypeToSQL(FieldDef: TSQLFieldDefinition): string; override;

    function GetGeneratorName: string; override;
    function GetSqlDialect: string; override;

    function GenerateGetLastInsertId(SQLField: TSQLField): string; override;
    function GenerateDropForeignKey(Command: TDropForeignKeyCommand): string; override;
    function GenerateLimitedSelect(SelectSql: TSelectSql; Command: TSelectCommand): string; override;

    function GetSupportedFeatures: TDBFeatures; override;
  end;

implementation
uses
  SysUtils;

{ TMySQLSQLGenerator }

function TMySQLSQLGenerator.FieldTypeToSQL(
  FieldDef: TSQLFieldDefinition): string;
begin
  Result := NumericTypeToSQL(FieldDef);
  if Result <> '' then
    Exit;

  case FieldDef.FieldType of
    ftByte:
      Result := 'TINYINT';
    ftShortint:
      Result := 'TINYINT';
    ftLargeint:
      Result := 'BIGINT';

    ftWideString:
      Result := Format('VARCHAR(%d)', [FieldDef.Length]);
    ftFixedWideChar:
      Result := Format('CHAR(%d)', [FieldDef.Length]);

    ftDateTime:
      Result := 'DATETIME';

    ftSingle:
      Result := 'FLOAT';

    ftBoolean:
      Result := 'BIT';

    ftMemo:
      Result := 'LONGTEXT';
    ftWideMemo:
      Result := 'LONGTEXT';
    ftBlob:
      Result := 'LONGBLOB';
  else
    Result := inherited FieldTypeToSQL(FieldDef);
  end;

  if FieldDef.AutoGenerated then
    Result := Result + ' AUTO_INCREMENT';
end;

function TMySQLSQLGenerator.GenerateDropForeignKey(
  Command: TDropForeignKeyCommand): string;
begin
  Result := 'ALTER TABLE ';

  if Command.FromTable.Schema <> '' then
    Result := Result + Command.FromTable.Schema + '.';

  Result := Result + Command.FromTable.Name + #13#10'  DROP FOREIGN KEY ' +
    GetForeignKeyName(Command) + ';';
end;

function TMySQLSQLGenerator.GenerateGetLastInsertId(SQLField: TSQLField): string;
begin
  Result := 'SELECT LAST_INSERT_ID();';
end;

function TMySQLSQLGenerator.GenerateLimitedSelect(SelectSql: TSelectSql;
  Command: TSelectCommand): string;
var
  MaxRows: integer;
begin
  Result := GenerateRegularSelect(SelectSql) + #13#10;

  // MaxRows must be present in SQL statement no matter what
  if not Command.HasMaxRows then
    MaxRows := MaxInt
  else
    MaxRows := Command.MaxRows;

  if Command.HasFirstRow then
    Result := Result + Format('LIMIT %d OFFSET %d', [MaxRows, Command.FirstRow])
  else
    Result := Result + Format('LIMIT %d', [MaxRows]);
end;

function TMySQLSQLGenerator.GetSqlDialect: string;
begin
  Result := 'MySQL';
end;

function TMySQLSQLGenerator.GetGeneratorName: string;
begin
  Result := 'MySQL SQL Generator';
end;

function TMySQLSQLGenerator.GetMaxConstraintNameLength: Integer;
begin
  Result := 64;
end;

function TMySQLSQLGenerator.GetSupportedFeatures: TDBFeatures;
begin
  Result := AllDBFeatures - [TDBFeature.Sequences];
end;

initialization
  TSQLGeneratorRegister.GetInstance.RegisterGenerator(TMySQLSQLGenerator.Create);

end.
