unit Aurelius.Commands.ForeignKeyCreator;

{$I Aurelius.inc}

interface

uses
  Generics.Collections,
  Aurelius.Commands.AbstractCommandPerformer,
  Aurelius.Mapping.Metadata,
  Aurelius.Sql.Commands;

type
  TForeignKeyCreator = class(TAbstractCommandPerformer)
  private
    procedure CreateFieldsForManyValuedAssocation(Assoc: TAssociation; ACommands: TList<TDDLCommand>);
    procedure DropFieldsFromManyValuedAssociation(Assoc: TAssociation; ACommands: TList<TDDLCommand>);

    procedure CreateForeignKeyForJoinedInheritanceTables(ACommands: TList<TDDLCommand>);
    procedure DropForeignKeyForJoinedInheritanceTables(ACommands: TList<TDDLCommand>);
  public
    procedure CreateForeignKeys(ACommands: TList<TDDLCommand>);
    procedure DropForeignKeys(ACommands: TList<TDDLCommand>);
  end;

implementation

uses
  Aurelius.Global.Config,
  Aurelius.Sql.BaseTypes,
  Aurelius.Sql.Interfaces;

{ TForeignKeyCreator }

procedure TForeignKeyCreator.CreateForeignKeyForJoinedInheritanceTables;
var
  Command: TCreateForeignKeyCommand;
  ToTable: TMetaTable;
  Cols: TArray<TColumn>;
  Col: TColumn;
begin
  Cols := Explorer.GetPrimaryJoinColumns(Self.Clazz);
  if Length(Cols) = 0 then
    Exit;

  ToTable := Explorer.GetTable(Self.Clazz.ClassParent);

  Command := TCreateForeignKeyCommand.Create;
  ACommands.Add(Command);
  Command.FromTable := CreateSQLTable;
  Command.ToTable := TSQLTable.Create(ToTable.Name, ToTable.Schema, '');
  for Col in Cols do
  begin
    Command.FromFields.Add(Col.Name);
    Command.ToFields.Add(Col.ReferencedColumn.Name);
  end;
end;

procedure TForeignKeyCreator.CreateFieldsForManyValuedAssocation(
  Assoc: TAssociation; ACommands: TList<TDDLCommand>);
var
  Command: TCreateFieldCommand;
  ToTable: TMetaTable;
  ToSQLTable: TSQLTable;
  C: TColumn;
begin
  if (Assoc.Kind <> TAssociationKind.ManyValued) or (Assoc.MappedBy <> '') then
    Exit;

  ToTable := Explorer.GetTable(Assoc.Target);
  ToSQLTable := TSQLTable.Create(ToTable.Name, ToTable.Schema, '');

  for C in Assoc.JoinColumns do
  begin
    Command := TCreateFieldCommand.Create;
    ACommands.Add(Command);
    Command.Table := ToSQLTable;
    Command.Field := GetEquivalentDefinition(TSQLFieldDefinition.Create(
      C.Name, TColumnProp.Required in C.Properties, C.FieldType, C.Length, C.Precision, C.Scale,
      IsAutoGeneratedColumn(C) and (TDBFeature.AutoGenerated in SQLGenerator.SupportedFeatures)));
  end;
end;

procedure TForeignKeyCreator.CreateForeignKeys(ACommands: TList<TDDLCommand>);
var
  Command: TCreateForeignKeyCommand;
  A: TAssociation;
  Associations: TList<TAssociation>;
  ToTable: TMetaTable;
  ToSQLTable: TSQLTable;
  C: TColumn;
begin
  CreateForeignKeyForJoinedInheritanceTables(ACommands);

  Associations := FAssociations;
  if Explorer.HasInheritance(Self.Clazz) then
    if Explorer.GetInheritanceStrategy(Self.Clazz) = TInheritanceStrategy.JoinedTables then
      Associations := Explorer.GetAssociations(Self.Clazz, False, False);

  for A in Associations do
  begin
    if (A.Kind = TAssociationKind.ManyValued) and (A.MappedBy <> '') then
      Continue;

    CreateFieldsForManyValuedAssocation(A, ACommands);

    ToTable := Explorer.GetTable(A.Target);
    ToSQLTable := TSQLTable.Create(ToTable.Name, ToTable.Schema, '');

    Command := TCreateForeignKeyCommand.Create;
    ACommands.Add(Command);
    if A.Kind = TAssociationKind.SingleValued then
    begin
      Command.FromTable := CreateSQLTable;
      Command.ToTable := ToSQLTable;
    end
    else
    begin
      Command.FromTable := ToSQLTable;
      Command.ToTable := CreateSQLTable;
    end;

    for C in A.JoinColumns do
    begin
      Command.FromFields.Add(C.Name);
      Command.ToFields.Add(C.ReferencedColumn.Name);
    end;
  end;
end;

procedure TForeignKeyCreator.DropFieldsFromManyValuedAssociation(
  Assoc: TAssociation; ACommands: TList<TDDLCommand>);
var
  Command: TDropFieldCommand;
  ToTable: TMetaTable;
  ToSQLTable: TSQLTable;
  C: TColumn;
begin
  if (Assoc.Kind <> TAssociationKind.ManyValued) or (Assoc.MappedBy <> '') then
    Exit;

  ToTable := Explorer.GetTable(Assoc.Target);
  ToSQLTable := TSQLTable.Create(ToTable.Name, ToTable.Schema, '');

  for C in Assoc.JoinColumns do
  begin
    Command := TDropFieldCommand.Create;
    ACommands.Add(Command);
    Command.Table := ToSQLTable;
    Command.FieldName := C.Name;
  end;
end;

procedure TForeignKeyCreator.DropForeignKeyForJoinedInheritanceTables;
var
  Command: TDropForeignKeyCommand;
  ToTable: TMetaTable;
  Col: TColumn;
  Cols: TArray<TColumn>;
begin
  Cols := Explorer.GetPrimaryJoinColumns(Self.Clazz);
  if Length(Cols) = 0 then
    Exit;

  ToTable := Explorer.GetTable(Self.Clazz.ClassParent);

  Command := TDropForeignKeyCommand.Create;
  ACommands.Add(Command);
  Command.FromTable := CreateSQLTable;
  Command.ToTable := TSQLTable.Create(ToTable.Name, ToTable.Schema, '');
  for Col in Cols do
  begin
    Command.FromFields.Add(Col.Name);
    Command.ToFields.Add(Col.ReferencedColumn.Name);
  end;
end;

procedure TForeignKeyCreator.DropForeignKeys(ACommands: TList<TDDLCommand>);
var
  Command: TDropForeignKeyCommand;
  A: TAssociation;
  Associations: TList<TAssociation>;
  ToTable: TMetaTable;
  ToSQLTable: TSQLTable;
  C: TColumn;
begin
  DropForeignKeyForJoinedInheritanceTables(ACommands);

  Associations := FAssociations;
  if Explorer.HasInheritance(Self.Clazz) then
    if Explorer.GetInheritanceStrategy(Self.Clazz) = TInheritanceStrategy.JoinedTables then
      Associations := Explorer.GetAssociations(Self.Clazz, False, False);

  for A in Associations do
  begin
    if (A.Kind = TAssociationKind.ManyValued) and (A.MappedBy <> '') then
      Continue;

    ToTable := Explorer.GetTable(A.Target);
    ToSQLTable := TSQLTable.Create(ToTable.Name, ToTable.Schema, '');

    Command := TDropForeignKeyCommand.Create;
    ACommands.Add(Command);
    if A.Kind = TAssociationKind.SingleValued then
    begin
      Command.FromTable := CreateSQLTable;
      Command.ToTable := ToSQLTable;
    end
    else
    begin
      Command.FromTable := ToSQLTable;
      Command.ToTable := CreateSQLTable;
    end;

    for C in A.JoinColumns do
    begin
      Command.FromFields.Add(C.Name);
      Command.ToFields.Add(C.ReferencedColumn.Name);
    end;

    DropFieldsFromManyValuedAssociation(A, ACommands);
  end;
end;

end.
